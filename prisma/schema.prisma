// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  userId       String        @unique
  name         String?
  email        String        @unique
  orders       Order[]
  shippingInfo ShippingInfo?
  billingInfo  BillingInfo?
  role         Role?         @default(USER)
}

enum Role {
  USER
  ADMIN
}

model Order {
  id           Int           @id @default(autoincrement())
  user_id      Int
  total_price  Float
  status       String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [id])
  orderDetails OrderDetail[]
  Status       Status?       @relation(fields: [statusId], references: [id])
  statusId     Int?
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Float
  product    Product @relation(fields: [product_id], references: [id])
  order      Order   @relation(fields: [order_id], references: [id])
}

model ShippingInfo {
  id          Int    @id @default(autoincrement())
  user_id     Int    @unique
  address     String
  city        String
  country     String
  postal_code String
  user        User   @relation(fields: [user_id], references: [id])
}

model BillingInfo {
  id          Int    @id @default(autoincrement())
  user_id     Int    @unique
  card_number String
  expiration  String
  cvv         String
  user        User   @relation(fields: [user_id], references: [id])
}

model Product {
  id           Int            @id @default(autoincrement()) // Unique identifier (auto-incrementing)
  name         String // Name of the product
  description  String? // Optional product description
  offer        Boolean? // Flag indicating if the product is on offer (nullable)
  price        Float // Product price
  images       ProductImage[] // Array of associated ProductImage models
  orderDetails OrderDetail[] // Array of associated OrderDetail models
  active       Boolean        @default(true) // Flag indicating if the product is active (available for purchase)
  section_id   Int? // Optional foreign key referencing the Section model (one-to-many)
  section      Section?       @relation(fields: [section_id], references: [id]) // Optional relationship to the Section model
}

model Section {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
  active   Boolean   @default(true) // Flag indicating if the product is active (available for purchase)
}

model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model UserQuestion {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  message String
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  product_id Int
  url        String
  product    Product @relation(fields: [product_id], references: [id])
}

model Status {
  id     Int     @id @default(autoincrement())
  name   String
  orders Order[]
}

model Settings {
  id   Int    @id @default(autoincrement())
  name String
}

// Many-to-One with Section model (a product belongs to one section)
// One-to-Many with ProductImage model (a product can have many images)
// One-to-Many with OrderDetail model (a product can be part of many order details)
